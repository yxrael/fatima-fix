"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.isSuccess = exports.paramsSerializer = void 0;
// eslint-disable-next-line import/no-named-as-default
var axios_1 = __importDefault(require("axios"));
var axios_case_converter_1 = __importDefault(require("axios-case-converter"));
var errors_1 = require("./types/errors");
var uuid_1 = require("uuid");
var axios_retry_1 = __importDefault(require("axios-retry"));
var endpoints_1 = require("./consts/endpoints");
function paramsSerializer(params) {
    var qs = new URLSearchParams();
    Object.keys(params).forEach(function (key) {
        var value = params[key];
        if (Array.isArray(value)) {
            qs.append(key, value.join(','));
        }
        else {
            qs.append(key, String(value));
        }
    });
    return qs.toString();
}
exports.paramsSerializer = paramsSerializer;
var defaultHeaders = {
    'Content-Type': 'application/json',
};
function getAuthHeader(apiKey) {
    return "Bearer ".concat(apiKey);
}
function isNetworkError(error) {
    return Boolean(!error.response && error.code !== 'ECONNABORTED');
}
function getRetryDelay(retryCount) {
    return retryCount === 1 ? 0 : 500;
}
function isAxiosError(error) {
    return Boolean(error === null || error === void 0 ? void 0 : error.isAxiosError);
}
function getTodoistRequestError(error, originalStack) {
    var requestError = new errors_1.TodoistRequestError(error.message);
    requestError.stack = isAxiosError(error) && originalStack ? originalStack.stack : error.stack;
    if (isAxiosError(error) && error.response) {
        requestError.httpStatusCode = error.response.status;
        requestError.responseData = error.response.data;
    }
    return requestError;
}
function getRequestConfiguration(baseURL, apiToken, requestId) {
    var authHeader = apiToken ? { Authorization: getAuthHeader(apiToken) } : undefined;
    var requestIdHeader = requestId ? { 'X-Request-Id': requestId } : undefined;
    var headers = __assign(__assign(__assign({}, defaultHeaders), authHeader), requestIdHeader);
    return { baseURL: baseURL, headers: headers };
}
function getAxiosClient(baseURL, apiToken, requestId) {
    var configuration = getRequestConfiguration(baseURL, apiToken, requestId);
    var client = (0, axios_case_converter_1.default)(axios_1.default.create(configuration));
    (0, axios_retry_1.default)(client, {
        retries: 3,
        retryCondition: isNetworkError,
        retryDelay: getRetryDelay,
    });
    return client;
}
function isSuccess(response) {
    return response.status >= 200 && response.status < 300;
}
exports.isSuccess = isSuccess;
function request(httpMethod, baseUri, relativePath, apiToken, payload, requestId) {
    return __awaiter(this, void 0, void 0, function () {
        var originalStack, axiosClient, _a, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    originalStack = new Error();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 9, , 10]);
                    // Sync api don't allow a request id in the CORS
                    if (httpMethod === 'POST' && !requestId && !baseUri.includes(endpoints_1.API_SYNC_BASE_URI)) {
                        requestId = (0, uuid_1.v4)();
                    }
                    axiosClient = getAxiosClient(baseUri, apiToken, requestId);
                    _a = httpMethod;
                    switch (_a) {
                        case 'GET': return [3 /*break*/, 2];
                        case 'POST': return [3 /*break*/, 4];
                        case 'DELETE': return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2: return [4 /*yield*/, axiosClient.get(relativePath, {
                        params: payload,
                        paramsSerializer: {
                            serialize: paramsSerializer,
                        },
                    })];
                case 3: return [2 /*return*/, _b.sent()];
                case 4: return [4 /*yield*/, axiosClient.post(relativePath, payload)];
                case 5: return [2 /*return*/, _b.sent()];
                case 6: return [4 /*yield*/, axiosClient.delete(relativePath)];
                case 7: return [2 /*return*/, _b.sent()];
                case 8: return [3 /*break*/, 10];
                case 9:
                    error_1 = _b.sent();
                    if (!isAxiosError(error_1) && !(error_1 instanceof Error)) {
                        throw new Error('An unknown error occurred during the request');
                    }
                    throw getTodoistRequestError(error_1, originalStack);
                case 10: return [2 /*return*/];
            }
        });
    });
}
exports.request = request;

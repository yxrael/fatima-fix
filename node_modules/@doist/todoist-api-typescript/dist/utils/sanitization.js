"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSanitizedTasks = exports.getSanitizedContent = void 0;
var BOLD_FORMAT = /(^|[\s!?,;>:]+)(?:\*\*|__|!!)(.+?)(\*\*|__|!!)(?=$|[\s!?,;><:]+)/gi;
var ITALIC_FORMAT = /(^|[\s!?,;>:]+)(?:\*|_|!)(.+?)(\*|_|!)(?=$|[\s!?,;><:]+)/gi;
var BOLD_ITALIC_FORMAT = /(^|[\s!?,;>:]+)(?:\*\*\*|___|!!!)(.+?)(\*\*\*|___|!!!)(?=$|[\s!?,;><:]+)/gi;
var CODE_BLOCK_FORMAT = /```([\s\S]*?)```/gi;
var CODE_INLINE_FORMAT = /`([^`]+)`/gi;
var TODOIST_LINK = /((?:(?:onenote:)?[\w-]+):\/\/[^\s]+)\s+[[(]([^)]+)[\])]/gi;
var MARKDOWN_LINK = /\[(.+?)\]\((.+?)\)/gi;
var GMAIL_LINK = /\[\[gmail=(.+?),\s*(.+?)\]\]/gi;
var OUTLOOK_LINK = /\[\[outlook=(.+?),\s*(.+?)\]\]/gi;
var THUNDERBIRD_LINK = /\[\[thunderbird\n(.+)\n(.+)\n\s*\]\]/gi;
var FAKE_SECTION_PREFIX = '* ';
var FAKE_SECTION_SUFFIX = ':';
function removeStyleFormatting(input) {
    if (!input.includes('!') && !input.includes('*') && !input.includes('_')) {
        return input;
    }
    function removeMarkdown(match, prefix, text) {
        return "".concat(prefix).concat(text);
    }
    input = input.replace(BOLD_ITALIC_FORMAT, removeMarkdown);
    input = input.replace(BOLD_FORMAT, removeMarkdown);
    input = input.replace(ITALIC_FORMAT, removeMarkdown);
    return input;
}
function removeCodeFormatting(input) {
    function removeMarkdown(match, text) {
        return text;
    }
    input = input.replace(CODE_BLOCK_FORMAT, removeMarkdown);
    input = input.replace(CODE_INLINE_FORMAT, removeMarkdown);
    return input;
}
function removeFakeSectionFormatting(input) {
    if (input.startsWith(FAKE_SECTION_PREFIX)) {
        input = input.slice(FAKE_SECTION_PREFIX.length);
    }
    if (input.endsWith(FAKE_SECTION_SUFFIX)) {
        input = input.slice(0, input.length - FAKE_SECTION_SUFFIX.length);
    }
    return input;
}
function removeMarkdownLinks(input) {
    if (!input.includes('[') || !input.includes(']')) {
        return input;
    }
    function removeMarkdown(match, text) {
        return text;
    }
    return input.replace(MARKDOWN_LINK, removeMarkdown);
}
function removeTodoistLinks(input) {
    if (!input.includes('(') || !input.includes(')')) {
        return input;
    }
    function removeMarkdown(match, url, text) {
        return text;
    }
    return input.replace(TODOIST_LINK, removeMarkdown);
}
function removeAppLinks(input) {
    if (input.includes('gmail')) {
        input = input.replace(GMAIL_LINK, function (match, id, text) { return text; });
    }
    if (input.includes('outlook')) {
        input = input.replace(OUTLOOK_LINK, function (match, id, text) { return text; });
    }
    if (input.includes('thunderbird')) {
        input = input.replace(THUNDERBIRD_LINK, function (match, text) { return text; });
    }
    return input;
}
function getSanitizedContent(input) {
    input = removeStyleFormatting(input);
    input = removeCodeFormatting(input);
    input = removeFakeSectionFormatting(input);
    input = removeMarkdownLinks(input);
    input = removeTodoistLinks(input);
    input = removeAppLinks(input);
    return input;
}
exports.getSanitizedContent = getSanitizedContent;
function getSanitizedTasks(tasks) {
    return tasks.map(function (task) { return (__assign(__assign({}, task), { sanitizedContent: getSanitizedContent(task.content) })); });
}
exports.getSanitizedTasks = getSanitizedTasks;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TodoistApi = void 0;
var runtypes_1 = require("runtypes");
var restClient_1 = require("./restClient");
var taskConverters_1 = require("./utils/taskConverters");
var endpoints_1 = require("./consts/endpoints");
var validators_1 = require("./utils/validators");
/**
 * Joins path segments using `/` separator.
 * @param segments A list of **valid** path segments.
 * @returns A joined path.
 */
function generatePath() {
    var segments = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        segments[_i] = arguments[_i];
    }
    return segments.join('/');
}
var TodoistApi = /** @class */ (function () {
    function TodoistApi(authToken, baseUrl) {
        this.authToken = authToken;
        this.restApiBase = (0, endpoints_1.getRestBaseUri)(baseUrl);
        this.syncApiBase = (0, endpoints_1.getSyncBaseUri)(baseUrl);
    }
    TodoistApi.prototype.getTask = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.getTasks = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTaskArray)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.addTask = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.quickAddTask = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response, task;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_SYNC_QUICK_ADD, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        task = (0, taskConverters_1.getTaskFromQuickAddResponse)(response.data);
                        return [2 /*return*/, (0, validators_1.validateTask)(task)];
                }
            });
        });
    };
    TodoistApi.prototype.updateTask = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.closeTask = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id, endpoints_1.ENDPOINT_REST_TASK_CLOSE), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    TodoistApi.prototype.reopenTask = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id, endpoints_1.ENDPOINT_REST_TASK_REOPEN), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    TodoistApi.prototype.deleteTask = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    TodoistApi.prototype.getProject = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.getProjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProjectArray)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.addProject = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.updateProject = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.deleteProject = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    TodoistApi.prototype.getProjectCollaborators = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(projectId);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, projectId, endpoints_1.ENDPOINT_REST_PROJECT_COLLABORATORS), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateUserArray)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.getSections = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, projectId ? { projectId: projectId } : undefined)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSectionArray)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.getSection = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSection)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.addSection = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSection)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.updateSection = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSection)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.deleteSection = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Fetches a personal label
     */
    TodoistApi.prototype.getLabel = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabel)(response.data)];
                }
            });
        });
    };
    /**
     * Fetches the personal labels
     */
    TodoistApi.prototype.getLabels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS, this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabelArray)(response.data)];
                }
            });
        });
    };
    /**
     * Adds a personal label
     */
    TodoistApi.prototype.addLabel = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabel)(response.data)];
                }
            });
        });
    };
    /**
     * Updates a personal label
     */
    TodoistApi.prototype.updateLabel = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabel)(response.data)];
                }
            });
        });
    };
    /**
     * Deletes a personal label
     */
    TodoistApi.prototype.deleteLabel = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    TodoistApi.prototype.getSharedLabels = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    TodoistApi.prototype.renameSharedLabel = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED_RENAME, this.authToken, args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TodoistApi.prototype.removeSharedLabel = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED_REMOVE, this.authToken, args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TodoistApi.prototype.getComments = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateCommentArray)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.getComment = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateComment)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.addComment = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateComment)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.updateComment = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateComment)(response.data)];
                }
            });
        });
    };
    TodoistApi.prototype.deleteComment = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        runtypes_1.String.check(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    return TodoistApi;
}());
exports.TodoistApi = TodoistApi;

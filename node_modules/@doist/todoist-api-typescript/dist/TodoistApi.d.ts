import { Task, Project, Label, User, Section, Comment } from './types/entities';
import { AddCommentArgs, AddLabelArgs, AddProjectArgs, AddSectionArgs, AddTaskArgs, GetProjectCommentsArgs, GetTaskCommentsArgs, GetTasksArgs, UpdateCommentArgs, UpdateLabelArgs, UpdateProjectArgs, UpdateSectionArgs, UpdateTaskArgs, QuickAddTaskArgs, GetSharedLabelsArgs, RenameSharedLabelArgs, RemoveSharedLabelArgs } from './types/requests';
export declare class TodoistApi {
    authToken: string;
    constructor(authToken: string, baseUrl?: string);
    private restApiBase;
    private syncApiBase;
    getTask(id: string): Promise<Task>;
    getTasks(args?: GetTasksArgs): Promise<Task[]>;
    addTask(args: AddTaskArgs, requestId?: string): Promise<Task>;
    quickAddTask(args: QuickAddTaskArgs): Promise<Task>;
    updateTask(id: string, args: UpdateTaskArgs, requestId?: string): Promise<Task>;
    closeTask(id: string, requestId?: string): Promise<boolean>;
    reopenTask(id: string, requestId?: string): Promise<boolean>;
    deleteTask(id: string, requestId?: string): Promise<boolean>;
    getProject(id: string): Promise<Project>;
    getProjects(): Promise<Project[]>;
    addProject(args: AddProjectArgs, requestId?: string): Promise<Project>;
    updateProject(id: string, args: UpdateProjectArgs, requestId?: string): Promise<Project>;
    deleteProject(id: string, requestId?: string): Promise<boolean>;
    getProjectCollaborators(projectId: string): Promise<User[]>;
    getSections(projectId?: string): Promise<Section[]>;
    getSection(id: string): Promise<Section>;
    addSection(args: AddSectionArgs, requestId?: string): Promise<Section>;
    updateSection(id: string, args: UpdateSectionArgs, requestId?: string): Promise<Section>;
    deleteSection(id: string, requestId?: string): Promise<boolean>;
    /**
     * Fetches a personal label
     */
    getLabel(id: string): Promise<Label>;
    /**
     * Fetches the personal labels
     */
    getLabels(): Promise<Label[]>;
    /**
     * Adds a personal label
     */
    addLabel(args: AddLabelArgs, requestId?: string): Promise<Label>;
    /**
     * Updates a personal label
     */
    updateLabel(id: string, args: UpdateLabelArgs, requestId?: string): Promise<Label>;
    /**
     * Deletes a personal label
     */
    deleteLabel(id: string, requestId?: string): Promise<boolean>;
    getSharedLabels(args?: GetSharedLabelsArgs): Promise<string[]>;
    renameSharedLabel(args: RenameSharedLabelArgs): Promise<void>;
    removeSharedLabel(args: RemoveSharedLabelArgs): Promise<void>;
    getComments(args: GetTaskCommentsArgs | GetProjectCommentsArgs): Promise<Comment[]>;
    getComment(id: string): Promise<Comment>;
    addComment(args: AddCommentArgs, requestId?: string): Promise<Comment>;
    updateComment(id: string, args: UpdateCommentArgs, requestId?: string): Promise<Comment>;
    deleteComment(id: string, requestId?: string): Promise<boolean>;
}
